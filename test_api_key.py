#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π Wildberries
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_api_key.py YOUR_API_KEY
"""

import asyncio
import sys
from wb_api.client import WildberriesAPI
from loguru import logger

async def test_api_key(api_key: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    
    print("=" * 60)
    print("üîë –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ö–õ–Æ–ß–ê WILDBERRIES")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    async with WildberriesAPI(api_key, force_demo=False) as client:
        
        # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞
        print("\n1Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞...")
        is_valid = await client.validate_api_key()
        
        if is_valid and not client.demo_mode:
            print("‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        elif is_valid and client.demo_mode:
            print("‚ö†Ô∏è  API endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –∫–ª—é—á –ø—Ä–∏–Ω—è—Ç (–¥–µ–º–æ-—Ä–µ–∂–∏–º)")
        else:
            print("‚ùå API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
            return
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
        print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤...")
        try:
            warehouses = await client.get_warehouses()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
            
            for warehouse in warehouses[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   üì¶ {warehouse.name} ({warehouse.region})")
            
            if len(warehouses) > 3:
                print(f"   ... –∏ –µ—â–µ {len(warehouses) - 3} —Å–∫–ª–∞–¥–æ–≤")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {e}")
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫
        print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫...")
        try:
            slots = await client.get_supply_slots(days_ahead=7)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤ –Ω–∞ 7 –¥–Ω–µ–π: {len(slots)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∫–ª–∞–¥–∞–º
            warehouses_with_slots = {}
            for slot in slots:
                if slot.warehouse_name not in warehouses_with_slots:
                    warehouses_with_slots[slot.warehouse_name] = []
                warehouses_with_slots[slot.warehouse_name].append(slot)
            
            for warehouse_name, warehouse_slots in list(warehouses_with_slots.items())[:3]:
                available_slots = [s for s in warehouse_slots if s.is_available]
                print(f"   üè™ {warehouse_name}: {len(available_slots)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤: {e}")
        
        # 4. –¢–µ—Å—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ)
        if client.demo_mode and slots:
            print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–µ–º–æ)...")
            try:
                test_slot = slots[0]
                success = await client.book_slot(test_slot.id)
                if success:
                    print("‚úÖ –î–µ–º–æ-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    print("‚ö†Ô∏è  –î–µ–º–æ-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        # 5. –°—Ç–∞—Ç—É—Å
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
        
        if client.demo_mode:
            print("üü° –î–ï–ú–û-–†–ï–ñ–ò–ú: API endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            print("   –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            print("   –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ WB API")
        else:
            print("üü¢ –ü–û–õ–ù–´–ô –†–ï–ñ–ò–ú: API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("   –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        print("=" * 60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        sys.stdout,
        level="INFO",
        format="<green>{time:HH:mm:ss}</green> | <level>{level}</level> | {message}",
        colorize=True
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) != 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_api_key.py YOUR_API_KEY")
        print("\nüìñ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Wildberries")
        print("2. –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ–º—É API")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏")
        return
    
    api_key = sys.argv[1].strip()
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        await test_api_key(api_key)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")


if __name__ == "__main__":
    asyncio.run(main()) 