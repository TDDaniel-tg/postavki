#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π Wildberries
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_api_simple.py YOUR_API_KEY
"""

import asyncio
import sys
import aiohttp
import socket


class SimpleAPITester:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WB API –∫–ª—é—á–µ–π"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.timeout = aiohttp.ClientTimeout(total=10)
        
    async def test_key_formats(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ API –∫–ª—é—á–∞"""
        
        print("=" * 60)
        print("üîë –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ö–õ–Æ–ß–ê WILDBERRIES")
        print("=" * 60)
        
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ:")
        print(f"   –î–ª–∏–Ω–∞: {len(self.api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ü–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: {self.api_key[:10]}...")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã: ...{self.api_key[-10:]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if " " in self.api_key:
            print("   ‚ö†Ô∏è  –ö–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã")
        if self.api_key.startswith("Bearer "):
            print("   ‚ö†Ô∏è  –ö–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'Bearer ' (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–∏—à–Ω–µ–µ)")
        if len(self.api_key) < 10:
            print("   ‚ö†Ô∏è  –ö–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        
        # –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_urls = [
            "https://supplies-api.wildberries.ru",
            "https://marketplace-api.wildberries.ru",
            "https://openapi.wildberries.ru"
        ]
        
        # –ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_methods = [
            {"headers": {"Authorization": f"Bearer {self.api_key}"}, "name": "Bearer token"},
            {"headers": {"Authorization": self.api_key}, "name": "Direct Authorization"},
            {"params": {"key": self.api_key}, "name": "Query parameter"},
            {"headers": {"X-API-Key": self.api_key}, "name": "X-API-Key header"},
            {"headers": {"Api-Key": self.api_key}, "name": "Api-Key header"},
        ]
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ endpoints
        test_endpoints = ["/api/v1/warehouses", "/api/v1/info", "/ping"]
        
        print(f"\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
        
        for base_url in test_urls:
            print(f"\nüîó {base_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS
            host = base_url.replace("https://", "").replace("http://", "")
            try:
                ip = socket.gethostbyname(host)
                print(f"   ‚úÖ DNS: {host} ‚Üí {ip}")
            except Exception as e:
                print(f"   ‚ùå DNS: {e}")
                continue
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            success_found = False
            
            for auth_method in auth_methods:
                for endpoint in test_endpoints:
                    try:
                        url = f"{base_url}{endpoint}"
                        
                        headers = {
                            "Content-Type": "application/json",
                            "User-Agent": "WB-Supply-Bot-Test/1.0"
                        }
                        
                        if "headers" in auth_method:
                            headers.update(auth_method["headers"])
                        
                        params = auth_method.get("params", {})
                        
                        async with aiohttp.ClientSession(timeout=self.timeout) as session:
                            async with session.get(url, headers=headers, params=params) as response:
                                status = response.status
                                
                                if status == 200:
                                    print(f"   ‚úÖ {auth_method['name']}: {endpoint} ‚Üí 200 OK")
                                    success_found = True
                                elif status == 401:
                                    print(f"   üîí {auth_method['name']}: {endpoint} ‚Üí 401 Unauthorized")
                                elif status == 404:
                                    print(f"   üîç {auth_method['name']}: {endpoint} ‚Üí 404 Not Found")
                                elif status == 403:
                                    print(f"   üö´ {auth_method['name']}: {endpoint} ‚Üí 403 Forbidden")
                                else:
                                    response_text = (await response.text())[:100]
                                    print(f"   ‚ùì {auth_method['name']}: {endpoint} ‚Üí {status} {response_text}")
                                    
                    except asyncio.TimeoutError:
                        print(f"   ‚è±Ô∏è  {auth_method['name']}: {endpoint} ‚Üí Timeout")
                    except Exception as e:
                        print(f"   ‚ùå {auth_method['name']}: {endpoint} ‚Üí Error: {str(e)[:50]}")
                        
            if not success_found:
                print(f"   ‚ö†Ô∏è  –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {base_url}")
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("‚úÖ = –ö–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üîí = –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")  
        print("üîç = Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("‚ùå = –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        print("=" * 60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) != 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_api_simple.py YOUR_API_KEY")
        print("\nüìñ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Wildberries")
        print("2. –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ–º—É API")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏")
        return
    
    api_key = sys.argv[1].strip()
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        tester = SimpleAPITester(api_key)
        await tester.test_key_formats()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main()) 