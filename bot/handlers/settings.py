from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from loguru import logger

from database import DatabaseManager
from bot.keyboards import get_settings_keyboard, get_auto_booking_keyboard
from bot.states import FilterStates


router = Router()


@router.message(Command("settings"))
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: Message, db: DatabaseManager):
    """Handle settings command"""
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        reply_markup=get_settings_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "settings")
async def handle_settings_callback(callback: CallbackQuery, db: DatabaseManager):
    """Handle settings callback"""
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        reply_markup=get_settings_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "filter_warehouses")
async def handle_filter_warehouses(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Handle warehouse filter settings"""
    user = await db.get_user_with_accounts(callback.from_user.id)
    
    if not user or not user.wb_accounts:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç WB", show_alert=True)
        return
    
    # TODO: Get warehouses from WB API
    await callback.answer("üèó –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data == "filter_coefficient")
async def handle_filter_coefficient(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Handle coefficient filter settings"""
    await state.set_state(FilterStates.setting_coefficient)
    
    filters = await db.get_user_filters(callback.from_user.id)
    current_min = filters.min_coefficient if filters else 1.0
    
    await callback.message.edit_text(
        f"üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {current_min}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.2):",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(FilterStates.setting_coefficient)
async def process_coefficient(message: Message, state: FSMContext, db: DatabaseManager):
    """Process coefficient input"""
    try:
        coefficient = float(message.text.replace(",", "."))
        
        if coefficient < 0 or coefficient > 10:
            await message.answer("‚ùå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10")
            return
        
        # Update user filters
        user = await db.get_user(message.from_user.id)
        await db.update_user_filters(
            user_id=user.id,
            min_coefficient=coefficient
        )
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {coefficient}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ —Å–ª–æ—Ç–∞—Ö "
            f"—Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {coefficient} –∏ –≤—ã—à–µ.",
            reply_markup=get_settings_keyboard()
        )
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.2)")


@router.callback_query(F.data == "auto_booking")
async def handle_auto_booking(callback: CallbackQuery, db: DatabaseManager):
    """Handle auto booking settings"""
    filters = await db.get_user_filters(callback.from_user.id)
    enabled = filters.auto_booking_enabled if filters else False
    
    await callback.message.edit_text(
        "ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–ë–æ—Ç –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.\n"
        "–ë—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã —Å–ª–æ—Ç—ã —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º.",
        reply_markup=get_auto_booking_keyboard(enabled),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_auto_booking")
async def handle_toggle_auto_booking(callback: CallbackQuery, db: DatabaseManager):
    """Toggle auto booking on/off"""
    user = await db.get_user(callback.from_user.id)
    filters = await db.get_user_filters(user.id)
    
    new_state = not filters.auto_booking_enabled
    
    await db.update_user_filters(
        user_id=user.id,
        auto_booking_enabled=new_state
    )
    
    await callback.message.edit_text(
        "ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–ë–æ—Ç –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.\n"
        "–ë—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã —Å–ª–æ—Ç—ã —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º.",
        reply_markup=get_auto_booking_keyboard(new_state),
        parse_mode="HTML"
    )
    
    status = "–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω–æ ‚ùå"
    await callback.answer(f"–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {status}")


@router.callback_query(F.data == "notifications")
async def handle_notifications(callback: CallbackQuery, db: DatabaseManager):
    """Handle notification settings"""
    filters = await db.get_user_filters(callback.from_user.id)
    enabled = filters.notifications_enabled if filters else True
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
    toggle_text = "–í—ã–∫–ª—é—á–∏—Ç—å üîï" if enabled else "–í–∫–ª—é—á–∏—Ç—å üîî"
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}",
            callback_data="none"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=toggle_text,
            callback_data="toggle_notifications"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="settings"
        )
    )
    
    await callback.message.edit_text(
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_notifications")
async def handle_toggle_notifications(callback: CallbackQuery, db: DatabaseManager):
    """Toggle notifications on/off"""
    user = await db.get_user(callback.from_user.id)
    filters = await db.get_user_filters(user.id)
    
    new_state = not filters.notifications_enabled
    
    await db.update_user_filters(
        user_id=user.id,
        notifications_enabled=new_state
    )
    
    await handle_notifications(callback, db)
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
    await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")


@router.callback_query(F.data == "back_to_main")
async def handle_back_to_main(callback: CallbackQuery):
    """Handle back to main menu"""
    await callback.message.delete()
    await callback.answer() 