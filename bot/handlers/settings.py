from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from loguru import logger

from database import DatabaseManager
from bot.keyboards import (
    get_settings_keyboard, 
    get_auto_booking_keyboard,
    get_warehouses_keyboard,
    get_regions_keyboard,
    get_time_slots_keyboard
)
from bot.states import FilterStates
from wb_api.client import WildberriesAPI

router = Router()

# –°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ WB –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
WB_REGIONS = [
    {"id": "msk", "name": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "cities": ["–ú–æ—Å–∫–≤–∞", "–ü–æ–¥–æ–ª—å—Å–∫", "–ö–æ–ª–µ–¥–∏–Ω–æ"]},
    {"id": "spb", "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "cities": ["–°–ü–±", "–£—Ç–∫–∏–Ω–∞ –ó–∞–≤–æ–¥–µ"]},
    {"id": "krd", "name": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π", "cities": ["–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∞—è"]},
    {"id": "ekb", "name": "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "cities": ["–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è"]},
    {"id": "tul", "name": "–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "cities": ["–¢—É–ª–∞"]},
    {"id": "stv", "name": "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π", "cities": ["–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫"]},
    {"id": "tat", "name": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω", "cities": ["–ö–∞–∑–∞–Ω—å"]},
    {"id": "nsk", "name": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "cities": ["–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"]},
    {"id": "ros", "name": "–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "cities": ["–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"]},
    {"id": "sam", "name": "–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "cities": ["–°–∞–º–∞—Ä–∞"]}
]

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º WB
TIME_SLOTS = [
    {"id": "morning", "name": "üåÖ –£—Ç—Ä–æ (9:00-12:00)", "start": "09:00", "end": "12:00"},
    {"id": "day", "name": "‚òÄÔ∏è –î–µ–Ω—å (12:00-15:00)", "start": "12:00", "end": "15:00"},
    {"id": "afternoon", "name": "üå§Ô∏è –ü–æ—Å–ª–µ –æ–±–µ–¥–∞ (15:00-18:00)", "start": "15:00", "end": "18:00"},
    {"id": "evening", "name": "üåÜ –í–µ—á–µ—Ä (18:00-21:00)", "start": "18:00", "end": "21:00"},
    {"id": "night", "name": "üåô –ù–æ—á—å (21:00-00:00)", "start": "21:00", "end": "00:00"},
    {"id": "early", "name": "üåÑ –†–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ (6:00-9:00)", "start": "06:00", "end": "09:00"}
]


@router.message(Command("settings"))
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: Message, db: DatabaseManager):
    """Handle settings command"""
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # Get current filters info
    filters = await db.get_user_filters(user.id)
    
    settings_info = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
    
    if filters:
        # Warehouses info
        if filters.warehouses:
            settings_info += f"üè≠ –°–∫–ª–∞–¥—ã: {len(filters.warehouses)} –≤—ã–±—Ä–∞–Ω–æ\n"
        else:
            settings_info += "üè≠ –°–∫–ª–∞–¥—ã: –í—Å–µ\n"
        
        # Regions info
        if filters.regions:
            settings_info += f"üìç –†–µ–≥–∏–æ–Ω—ã: {len(filters.regions)} –≤—ã–±—Ä–∞–Ω–æ\n"
        else:
            settings_info += "üìç –†–µ–≥–∏–æ–Ω—ã: –í—Å–µ\n"
        
        # Coefficient
        settings_info += f"üìä –ú–∏–Ω. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {filters.min_coefficient}\n"
        
        # Time slots
        if filters.time_slots:
            settings_info += f"üïê –í—Ä–µ–º—è: {len(filters.time_slots)} —Å–ª–æ—Ç–æ–≤\n"
        else:
            settings_info += "üïê –í—Ä–µ–º—è: –õ—é–±–æ–µ\n"
        
        # Auto booking
        auto_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if filters.auto_booking_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        settings_info += f"ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {auto_status}\n"
        
        if filters.auto_booking_enabled:
            settings_info += f"   –õ–∏–º–∏—Ç: {filters.auto_booking_limit}/–¥–µ–Ω—å\n"
    else:
        settings_info += "‚ö†Ô∏è –§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
    
    settings_info += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    
    await message.answer(
        settings_info,
        reply_markup=get_settings_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "settings")
async def handle_settings_callback(callback: CallbackQuery, db: DatabaseManager):
    """Handle settings callback"""
    await cmd_settings(callback.message, db)
    await callback.answer()


@router.callback_query(F.data == "filter_warehouses")
async def handle_filter_warehouses(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Handle warehouse filter settings"""
    user = await db.get_user_with_accounts(callback.from_user.id)
    
    if not user or not user.wb_accounts:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç WB", show_alert=True)
        return
    
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤...")
    
    try:
        # Get warehouses from first active account
        active_account = next((acc for acc in user.wb_accounts if acc.is_active), None)
        if not active_account:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ WB", show_alert=True)
            return
        
        # Get warehouses from API
        async with WildberriesAPI(active_account.api_key) as api:
            warehouses = await api.get_warehouses()
        
        # Get current selected warehouses
        filters = await db.get_user_filters(user.id)
        selected_warehouses = filters.warehouses if filters else []
        
        await state.set_state(FilterStates.selecting_warehouses)
        await state.update_data(warehouses=warehouses, selected=selected_warehouses)
        
        await callback.message.edit_text(
            "üè≠ <b>–í—ã–±–æ—Ä —Å–∫–ª–∞–¥–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n"
            "‚úÖ - —Å–∫–ª–∞–¥ –≤–∫–ª—é—á–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "‚¨ú - —Å–∫–ª–∞–¥ –æ—Ç–∫–ª—é—á–µ–Ω",
            reply_markup=get_warehouses_keyboard(warehouses, selected_warehouses),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error loading warehouses: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_settings_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_wh_"))
async def handle_toggle_warehouse(callback: CallbackQuery, state: FSMContext):
    """Toggle warehouse selection"""
    warehouse_id = callback.data.replace("toggle_wh_", "")
    
    data = await state.get_data()
    warehouses = data.get("warehouses", [])
    selected = data.get("selected", [])
    
    # Toggle selection
    if warehouse_id in selected:
        selected.remove(warehouse_id)
    else:
        selected.append(warehouse_id)
    
    await state.update_data(selected=selected)
    
    # Update keyboard
    await callback.message.edit_reply_markup(
        reply_markup=get_warehouses_keyboard(warehouses, selected)
    )
    await callback.answer()


@router.callback_query(F.data == "save_warehouses")
async def handle_save_warehouses(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Save warehouse selections"""
    data = await state.get_data()
    selected = data.get("selected", [])
    
    user = await db.get_user(callback.from_user.id)
    
    # Update user filters
    await db.update_user_filters(
        user_id=user.id,
        warehouses=selected
    )
    
    count = len(selected)
    status = f"{count} —Å–∫–ª–∞–¥–æ–≤ –≤—ã–±—Ä–∞–Ω–æ" if count > 0 else "–í—Å–µ —Å–∫–ª–∞–¥—ã"
    
    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–ª–∞–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã.",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "filter_regions")
async def handle_filter_regions(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Handle region filter settings"""
    user = await db.get_user(callback.from_user.id)
    filters = await db.get_user_filters(user.id)
    selected_regions = filters.regions if filters else []
    
    await state.set_state(FilterStates.selecting_regions)
    await state.update_data(selected=selected_regions)
    
    await callback.message.edit_text(
        "üìç <b>–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n"
        "‚úÖ - —Ä–µ–≥–∏–æ–Ω –≤–∫–ª—é—á–µ–Ω\n"
        "‚¨ú - —Ä–µ–≥–∏–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω",
        reply_markup=get_regions_keyboard(WB_REGIONS, selected_regions),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_reg_"))
async def handle_toggle_region(callback: CallbackQuery, state: FSMContext):
    """Toggle region selection"""
    region_id = callback.data.replace("toggle_reg_", "")
    
    data = await state.get_data()
    selected = data.get("selected", [])
    
    # Toggle selection
    if region_id in selected:
        selected.remove(region_id)
    else:
        selected.append(region_id)
    
    await state.update_data(selected=selected)
    
    # Update keyboard
    await callback.message.edit_reply_markup(
        reply_markup=get_regions_keyboard(WB_REGIONS, selected)
    )
    await callback.answer()


@router.callback_query(F.data == "save_regions")
async def handle_save_regions(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Save region selections"""
    data = await state.get_data()
    selected = data.get("selected", [])
    
    user = await db.get_user(callback.from_user.id)
    
    # Update user filters
    await db.update_user_filters(
        user_id=user.id,
        regions=selected
    )
    
    count = len(selected)
    status = f"{count} —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤—ã–±—Ä–∞–Ω–æ" if count > 0 else "–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã"
    
    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã.",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "filter_coefficient")
async def handle_filter_coefficient(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Handle coefficient filter settings"""
    await state.set_state(FilterStates.setting_coefficient)
    
    filters = await db.get_user_filters(callback.from_user.id)
    current_min = filters.min_coefficient if filters else 1.0
    
    await callback.message.edit_text(
        f"üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>{current_min}</b>\n\n"
        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∫–ª–∞–¥–∞.\n"
        f"–ß–µ–º –≤—ã—à–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ –ø–æ—Å—Ç–∞–≤–∫–∞.\n\n"
        f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
        f"‚Ä¢ 1.0 - –ª—é–±—ã–µ —Å–ª–æ—Ç—ã\n"
        f"‚Ä¢ 1.2 - —Ö–æ—Ä–æ—à–∏–µ —Å–ª–æ—Ç—ã\n"
        f"‚Ä¢ 1.5 - –æ—Ç–ª–∏—á–Ω—ã–µ —Å–ª–æ—Ç—ã\n"
        f"‚Ä¢ 2.0+ - –ø—Ä–µ–º–∏—É–º —Å–ª–æ—Ç—ã\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1.2</code>):",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(FilterStates.setting_coefficient)
async def process_coefficient(message: Message, state: FSMContext, db: DatabaseManager):
    """Process coefficient input"""
    try:
        coefficient = float(message.text.replace(",", "."))
        
        if coefficient < 0 or coefficient > 10:
            await message.answer("‚ùå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10")
            return
        
        # Update user filters
        user = await db.get_user(message.from_user.id)
        await db.update_user_filters(
            user_id=user.id,
            min_coefficient=coefficient
        )
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{coefficient}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ —Å–ª–æ—Ç–∞—Ö "
            f"—Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {coefficient} –∏ –≤—ã—à–µ.",
            reply_markup=get_settings_keyboard(),
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.2)")


@router.callback_query(F.data == "filter_time")
async def handle_filter_time(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Handle time slots filter settings"""
    user = await db.get_user(callback.from_user.id)
    filters = await db.get_user_filters(user.id)
    selected_times = filters.time_slots if filters else []
    
    await state.set_state(FilterStates.setting_time_slots)
    await state.update_data(selected=selected_times)
    
    await callback.message.edit_text(
        "üïê <b>–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫:\n"
        "‚úÖ - –≤—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–æ\n"
        "‚¨ú - –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–æ\n\n"
        "üí° –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - –ø–æ–¥–æ–π–¥–µ—Ç –ª—é–±–æ–µ –≤—Ä–µ–º—è",
        reply_markup=get_time_slots_keyboard(TIME_SLOTS, selected_times),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_time_"))
async def handle_toggle_time(callback: CallbackQuery, state: FSMContext):
    """Toggle time slot selection"""
    time_id = callback.data.replace("toggle_time_", "")
    
    data = await state.get_data()
    selected = data.get("selected", [])
    
    # Toggle selection
    if time_id in selected:
        selected.remove(time_id)
    else:
        selected.append(time_id)
    
    await state.update_data(selected=selected)
    
    # Update keyboard
    await callback.message.edit_reply_markup(
        reply_markup=get_time_slots_keyboard(TIME_SLOTS, selected)
    )
    await callback.answer()


@router.callback_query(F.data == "save_time_slots")
async def handle_save_time_slots(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Save time slots selections"""
    data = await state.get_data()
    selected = data.get("selected", [])
    
    user = await db.get_user(callback.from_user.id)
    
    # Update user filters
    await db.update_user_filters(
        user_id=user.id,
        time_slots=selected
    )
    
    count = len(selected)
    status = f"{count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ" if count > 0 else "–õ—é–±–æ–µ –≤—Ä–µ–º—è"
    
    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã.",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "auto_booking")
async def handle_auto_booking(callback: CallbackQuery, db: DatabaseManager):
    """Handle auto booking settings"""
    filters = await db.get_user_filters(callback.from_user.id)
    enabled = filters.auto_booking_enabled if filters else False
    limit = filters.auto_booking_limit if filters else 5
    
    status_text = "–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω–æ ‚ùå"
    
    text = (
        "ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
    )
    
    if enabled:
        text += (
            f"–õ–∏–º–∏—Ç: <b>{limit} —Å–ª–æ—Ç–æ–≤/–¥–µ–Ω—å</b>\n\n"
            "üìã <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã\n"
            "‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º\n"
            "‚Ä¢ –ë—Ä–æ–Ω–∏—Ä—É–µ—Ç —Å–ª–æ—Ç—ã —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º\n"
            "‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n\n"
            "‚ö° –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!"
        )
    else:
        text += (
            "\nüìã <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
            "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç 24/7 –±–µ–∑ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
            "üí° –í–∫–ª—é—á–∏—Ç–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_auto_booking_keyboard(enabled, limit),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_auto_booking")
async def handle_toggle_auto_booking(callback: CallbackQuery, db: DatabaseManager):
    """Toggle auto booking on/off"""
    user = await db.get_user(callback.from_user.id)
    filters = await db.get_user_filters(user.id)
    
    new_state = not filters.auto_booking_enabled
    
    await db.update_user_filters(
        user_id=user.id,
        auto_booking_enabled=new_state
    )
    
    # Refresh the auto booking menu
    await handle_auto_booking(callback, db)
    
    status = "–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω–æ ‚ùå"
    await callback.answer(f"–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {status}")


@router.callback_query(F.data == "auto_booking_settings")
async def handle_auto_booking_settings(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Handle auto booking advanced settings"""
    await state.set_state(FilterStates.setting_auto_booking)
    
    filters = await db.get_user_filters(callback.from_user.id)
    current_limit = filters.auto_booking_limit if filters else 5
    
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: <b>{current_limit} —Å–ª–æ—Ç–æ–≤/–¥–µ–Ω—å</b>\n\n"
        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        f"‚Ä¢ 1-3 —Å–ª–æ—Ç–∞ - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        f"‚Ä¢ 5-10 —Å–ª–æ—Ç–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º\n"
        f"‚Ä¢ 15+ —Å–ª–æ—Ç–æ–≤ - –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n\n"
        f"‚ö†Ô∏è <b>–õ–∏–º–∏—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç (1-50):",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(FilterStates.setting_auto_booking)
async def process_auto_booking_limit(message: Message, state: FSMContext, db: DatabaseManager):
    """Process auto booking limit input"""
    try:
        limit = int(message.text)
        
        if limit < 1 or limit > 50:
            await message.answer("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–ª–æ—Ç–æ–≤")
            return
        
        # Update user filters
        user = await db.get_user(message.from_user.id)
        await db.update_user_filters(
            user_id=user.id,
            auto_booking_limit=limit
        )
        
        await state.clear()
        await message.answer(
            f"‚úÖ –õ–∏–º–∏—Ç –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{limit} —Å–ª–æ—Ç–æ–≤/–¥–µ–Ω—å</b>\n\n"
            f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ {limit} –ª—É—á—à–∏—Ö —Å–ª–æ—Ç–æ–≤ –≤ –¥–µ–Ω—å.",
            reply_markup=get_settings_keyboard(),
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50")


@router.callback_query(F.data == "notifications")
async def handle_notifications(callback: CallbackQuery, db: DatabaseManager):
    """Handle notification settings"""
    filters = await db.get_user_filters(callback.from_user.id)
    enabled = filters.notifications_enabled if filters else True
    quiet_start = filters.quiet_hours_start if filters else None
    quiet_end = filters.quiet_hours_end if filters else None
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
    toggle_text = "–í—ã–∫–ª—é—á–∏—Ç—å üîï" if enabled else "–í–∫–ª—é—á–∏—Ç—å üîî"
    
    text = (
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
    )
    
    if quiet_start is not None and quiet_end is not None:
        text += f"üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã: {quiet_start:02d}:00 - {quiet_end:02d}:00\n\n"
    
    text += (
        "üì± <b>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n"
        "‚Ä¢ –ù–æ–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã\n"
        "‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n\n"
        "üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∏—Ö–∏–µ —á–∞—Å—ã –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞"
    )
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text=toggle_text,
            callback_data="toggle_notifications"
        )
    )
    
    if enabled:
        builder.row(
            InlineKeyboardButton(
                text="üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã",
                callback_data="set_quiet_hours"
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="settings"
        )
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_notifications")
async def handle_toggle_notifications(callback: CallbackQuery, db: DatabaseManager):
    """Toggle notifications on/off"""
    user = await db.get_user(callback.from_user.id)
    filters = await db.get_user_filters(user.id)
    
    new_state = not filters.notifications_enabled
    
    await db.update_user_filters(
        user_id=user.id,
        notifications_enabled=new_state
    )
    
    await handle_notifications(callback, db)
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
    await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")


@router.callback_query(F.data == "set_quiet_hours")
async def handle_set_quiet_hours(callback: CallbackQuery, state: FSMContext):
    """Set quiet hours for notifications"""
    await state.set_state(FilterStates.setting_quiet_hours)
    
    await callback.message.edit_text(
        "üåô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤</b>\n\n"
        "–í —ç—Ç–æ –≤—Ä–µ–º—è –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>22 06</code>\n"
        "(—Ç–∏—Ö–∏–µ —á–∞—Å—ã —Å 22:00 –¥–æ 06:00)\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–æ—Ç–∫–ª—é—á–∏—Ç—å</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤.",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(FilterStates.setting_quiet_hours)
async def process_quiet_hours(message: Message, state: FSMContext, db: DatabaseManager):
    """Process quiet hours input"""
    if message.text.lower() in ["–æ—Ç–∫–ª—é—á–∏—Ç—å", "–æ—Ç–º–µ–Ω–∞", "–Ω–µ—Ç"]:
        user = await db.get_user(message.from_user.id)
        await db.update_user_filters(
            user_id=user.id,
            quiet_hours_start=None,
            quiet_hours_end=None
        )
        
        await state.clear()
        await message.answer(
            "‚úÖ –¢–∏—Ö–∏–µ —á–∞—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã\n\n"
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_settings_keyboard()
        )
        return
    
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError()
        
        start_hour = int(parts[0])
        end_hour = int(parts[1])
        
        if not (0 <= start_hour <= 23) or not (0 <= end_hour <= 23):
            raise ValueError()
        
        user = await db.get_user(message.from_user.id)
        await db.update_user_filters(
            user_id=user.id,
            quiet_hours_start=start_hour,
            quiet_hours_end=end_hour
        )
        
        await state.clear()
        await message.answer(
            f"‚úÖ –¢–∏—Ö–∏–µ —á–∞—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: <b>{start_hour:02d}:00 - {end_hour:02d}:00</b>\n\n"
            f"–í —ç—Ç–æ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥—É—Ç.",
            reply_markup=get_settings_keyboard(),
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 23, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>22 06</code>",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "back_to_main")
async def handle_back_to_main(callback: CallbackQuery):
    """Handle back to main menu"""
    await callback.message.delete()
    await callback.answer() 