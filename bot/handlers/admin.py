from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from config import settings
from wb_api import WildberriesAPI
from database import DatabaseManager

router = Router()

# Admin user IDs (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
ADMIN_USER_IDS = [
    # –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à Telegram ID
    # –ù–∞–ø—Ä–∏–º–µ—Ä: 123456789
]


def is_admin(user_id: int) -> bool:
    """Check if user is admin"""
    return user_id in ADMIN_USER_IDS


def get_admin_keyboard() -> InlineKeyboardMarkup:
    """Get admin control keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API",
            callback_data="admin_api_settings"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="admin_stats"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –¢–µ—Å—Ç API",
            callback_data="admin_test_api"
        )
    )
    
    return builder.as_markup()


def get_api_settings_keyboard() -> InlineKeyboardMarkup:
    """Get API settings keyboard"""
    builder = InlineKeyboardBuilder()
    
    # Current demo mode status
    demo_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings.WB_API_FORCE_DEMO_MODE else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
    fallback_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings.WB_API_ALLOW_DEMO_FALLBACK else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
    
    builder.row(
        InlineKeyboardButton(
            text=f"üé≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–º–æ-—Ä–µ–∂–∏–º: {demo_status}",
            callback_data="admin_toggle_force_demo"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"üîÑ Fallback –≤ –¥–µ–º–æ: {fallback_status}",
            callback_data="admin_toggle_demo_fallback"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üåê –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π URL",
            callback_data="admin_use_main_url"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üîÄ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π URL",
            callback_data="admin_use_backup_url"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_back"
        )
    )
    
    return builder.as_markup()


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """Admin panel command"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.answer(
        "üõ† **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "admin_api_settings")
async def handle_api_settings(callback: CallbackQuery):
    """Handle API settings"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    text = (
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API**\n\n"
        f"üåê **–û—Å–Ω–æ–≤–Ω–æ–π URL**: `{settings.WB_API_BASE_URL}`\n"
        f"üîÄ **–†–µ–∑–µ—Ä–≤–Ω—ã–π URL**: `{settings.WB_API_BACKUP_URL}`\n\n"
        f"üé≠ **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–º–æ**: {'–í–∫–ª—é—á–µ–Ω' if settings.WB_API_FORCE_DEMO_MODE else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üîÑ **Fallback –≤ –¥–µ–º–æ**: {'–í–∫–ª—é—á–µ–Ω' if settings.WB_API_ALLOW_DEMO_FALLBACK else '–í—ã–∫–ª—é—á–µ–Ω'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_api_settings_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "admin_toggle_force_demo")
async def handle_toggle_force_demo(callback: CallbackQuery):
    """Toggle force demo mode"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    # Toggle setting
    settings.WB_API_FORCE_DEMO_MODE = not settings.WB_API_FORCE_DEMO_MODE
    
    status = "–≤–∫–ª—é—á–µ–Ω" if settings.WB_API_FORCE_DEMO_MODE else "–≤—ã–∫–ª—é—á–µ–Ω"
    await callback.answer(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–º–æ-—Ä–µ–∂–∏–º {status}", show_alert=True)
    
    # Update keyboard
    await handle_api_settings(callback)


@router.callback_query(F.data == "admin_toggle_demo_fallback")
async def handle_toggle_demo_fallback(callback: CallbackQuery):
    """Toggle demo fallback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    # Toggle setting
    settings.WB_API_ALLOW_DEMO_FALLBACK = not settings.WB_API_ALLOW_DEMO_FALLBACK
    
    status = "–≤–∫–ª—é—á–µ–Ω" if settings.WB_API_ALLOW_DEMO_FALLBACK else "–≤—ã–∫–ª—é—á–µ–Ω"
    await callback.answer(f"‚úÖ Fallback –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º {status}", show_alert=True)
    
    # Update keyboard
    await handle_api_settings(callback)


@router.callback_query(F.data == "admin_use_main_url")
async def handle_use_main_url(callback: CallbackQuery):
    """Switch to main URL"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    settings.WB_API_USE_BACKUP = False
    await callback.answer("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π URL", show_alert=True)
    
    # Update keyboard
    await handle_api_settings(callback)


@router.callback_query(F.data == "admin_use_backup_url")
async def handle_use_backup_url(callback: CallbackQuery):
    """Switch to backup URL"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    settings.WB_API_USE_BACKUP = True
    await callback.answer("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π URL", show_alert=True)
    
    # Update keyboard
    await handle_api_settings(callback)


@router.callback_query(F.data == "admin_test_api")
async def handle_test_api(callback: CallbackQuery, db: DatabaseManager):
    """Test API connectivity"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.message.edit_text("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
    
    try:
        # Get first user with API key for testing
        users = await db.get_active_users()
        if not users:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å API –∫–ª—é—á–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        test_user = users[0]
        if not test_user.wb_accounts:
            await callback.message.edit_text("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç API –∫–ª—é—á–µ–π")
            return
        
        test_account = test_user.wb_accounts[0]
        
        # Test API
        async with WildberriesAPI(test_account.api_key, force_demo=False) as api:
            is_valid = await api.validate_api_key()
            warehouses = await api.get_warehouses()
            slots = await api.get_supply_slots()
        
        mode = "üé≠ –î–µ–º–æ-—Ä–µ–∂–∏–º" if api.demo_mode else "üåê –†–µ–∞–ª—å–Ω—ã–π API"
        
        text = (
            "‚úÖ **–¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
            f"**–†–µ–∂–∏–º**: {mode}\n"
            f"**API –∫–ª—é—á**: {'–í–∞–ª–∏–¥–µ–Ω' if is_valid else '–ù–µ–≤–∞–ª–∏–¥–µ–Ω'}\n"
            f"**–°–∫–ª–∞–¥—ã**: {len(warehouses)} –Ω–∞–π–¥–µ–Ω–æ\n"
            f"**–°–ª–æ—Ç—ã**: {len(slots)} –Ω–∞–π–¥–µ–Ω–æ\n\n"
            f"**URL**: `{api.current_url}`"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API**\n\n"
            f"```\n{str(e)}\n```",
            reply_markup=get_admin_keyboard(),
            parse_mode="Markdown"
        )


@router.callback_query(F.data == "admin_stats")
async def handle_admin_stats(callback: CallbackQuery, db: DatabaseManager):
    """Show admin statistics"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        # Get statistics
        users = await db.get_active_users()
        total_users = len(users)
        total_accounts = sum(len(user.wb_accounts) for user in users)
        active_accounts = sum(len([acc for acc in user.wb_accounts if acc.is_active]) for user in users)
        
        text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**: {total_users}\n"
            f"üíº **–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤**: {total_accounts}\n"
            f"‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤**: {active_accounts}\n\n"
            f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API**:\n"
            f"‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–º–æ: {'–î–∞' if settings.WB_API_FORCE_DEMO_MODE else '–ù–µ—Ç'}\n"
            f"‚Ä¢ Fallback –≤ –¥–µ–º–æ: {'–î–∞' if settings.WB_API_ALLOW_DEMO_FALLBACK else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤: {'–î–∞' if settings.WB_API_USE_BACKUP else '–ù–µ—Ç'}"
        )
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="admin_back"
            )
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}",
            reply_markup=get_admin_keyboard()
        )


@router.callback_query(F.data == "admin_back")
async def handle_admin_back(callback: CallbackQuery):
    """Return to admin main menu"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üõ† **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    ) 