from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from loguru import logger

from database import DatabaseManager
from services.booking import BookingService
from wb_api import WildberriesAPI
from bot.states import BookingStates
from bot.keyboards.main import get_cancel_keyboard, get_main_keyboard
from bot.keyboards.inline import get_account_selection_keyboard


router = Router()


@router.callback_query(F.data.startswith("book_"))
async def handle_book_slot(callback: CallbackQuery, db: DatabaseManager, booking_service: BookingService):
    """Handle slot booking"""
    slot_id = callback.data.split("_", 1)[1]
    
    # Acknowledge callback immediately
    await callback.answer("üîÑ –ë—Ä–æ–Ω–∏—Ä—É—é —Å–ª–æ—Ç...")
    
    # Try to book slot
    success = await booking_service.book_slot_by_id(
        user_id=callback.from_user.id,
        slot_id=slot_id
    )
    
    if success:
        # Update message to show success
        try:
            await callback.message.edit_text(
                callback.message.text + "\n\n‚úÖ <b>–ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–û!</b>",
                parse_mode="HTML"
            )
        except:
            pass
    else:
        # Booking failed - notification already sent by booking service
        try:
            await callback.message.edit_text(
                callback.message.text + "\n\n‚ùå <b>–ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨</b>",
                parse_mode="HTML"
            )
        except:
            pass


@router.callback_query(F.data.startswith("skip_"))
async def handle_skip_slot(callback: CallbackQuery):
    """Handle skip slot"""
    await callback.answer("–°–ª–æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
    
    try:
        # Update message to show it was skipped
        await callback.message.edit_text(
            callback.message.text + "\n\n‚è≠ <i>–ü—Ä–æ–ø—É—â–µ–Ω–æ</i>",
            parse_mode="HTML"
        )
    except:
        pass


@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
async def cmd_booking_history(message: Message, db: DatabaseManager):
    """Show booking history"""
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # Get recent bookings
    bookings = await db.get_user_booked_slots(user.id, limit=10)
    
    if not bookings:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n\n"
            "–°–ª–æ—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        return
    
    # Format bookings list
    text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</b>\n\n"
    
    for booking in bookings:
        icon = "ü§ñ" if booking.auto_booked else "üë§"
        status_icon = {
            "booked": "‚úÖ",
            "cancelled": "‚ùå",
            "completed": "‚úîÔ∏è"
        }.get(booking.status, "‚ùì")
        
        text += (
            f"{icon} {status_icon} <b>{booking.warehouse_name}</b>\n"
            f"üìÖ {booking.supply_date.strftime('%d.%m.%Y')} "
            f"üïí {booking.time_slot}\n"
            f"üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {booking.coefficient}\n"
            f"üïê –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: {booking.booked_at.strftime('%d.%m %H:%M')}\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")


@router.message(F.text == "üöö –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É")
async def cmd_book_supply(message: Message, state: FSMContext, db: DatabaseManager):
    """Start supply booking process"""
    user = await db.get_user_with_accounts(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if not user.wb_accounts:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç WB —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        )
        return
    
    # Check if user has active accounts
    active_accounts = [acc for acc in user.wb_accounts if acc.is_active]
    if not active_accounts:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
            "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã'."
        )
        return
    
    # If user has only one account, skip account selection
    if len(active_accounts) == 1:
        await state.update_data(selected_account_id=active_accounts[0].id)
        await state.set_state(BookingStates.waiting_for_supply_number)
        
        await message.answer(
            "üöö <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: <b>{active_accounts[0].name}</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å:\n\n"
            "üìå <i>–ù–∞–ø—Ä–∏–º–µ—Ä: WB123456789</i>\n\n"
            "‚ÑπÔ∏è –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ "
            "(—Å–∫–ª–∞–¥—ã, —Ä–µ–≥–∏–æ–Ω—ã, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã) –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–∞–≤–∫—É.",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
    else:
        # Multiple accounts - show selection
        await state.set_state(BookingStates.selecting_account_for_booking)
        
        await message.answer(
            "üöö <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
            "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_account_selection_keyboard(active_accounts)
        )


@router.callback_query(F.data.startswith("select_account_"), BookingStates.selecting_account_for_booking)
async def handle_account_selection_for_booking(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Handle account selection for booking"""
    account_id = int(callback.data.split("_")[-1])
    
    # Get account info
    user = await db.get_user_with_accounts(callback.from_user.id)
    account = next((acc for acc in user.wb_accounts if acc.id == account_id), None)
    
    if not account or not account.is_active:
        await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    await state.update_data(selected_account_id=account_id)
    await state.set_state(BookingStates.waiting_for_supply_number)
    
    await callback.message.edit_text(
        "üöö <b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        f"üì± –ê–∫–∫–∞—É–Ω—Ç: <b>{account.name}</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å:\n\n"
        "üìå <i>–ù–∞–ø—Ä–∏–º–µ—Ä: WB123456789</i>\n\n"
        "‚ÑπÔ∏è –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ "
        "(—Å–∫–ª–∞–¥—ã, —Ä–µ–≥–∏–æ–Ω—ã, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã) –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–∞–≤–∫—É.",
        parse_mode="HTML",
        reply_markup=None
    )
    
    # Send new message with cancel keyboard
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )


@router.message(BookingStates.waiting_for_supply_number)
async def process_supply_number(message: Message, state: FSMContext, db: DatabaseManager, booking_service: BookingService):
    """Process supply number input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user = await db.get_user_with_accounts(message.from_user.id)
        has_accounts = len(user.wb_accounts) > 0 if user else False
        await message.answer(
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(has_accounts)
        )
        return
    
    supply_number = message.text.strip()
    
    # Validate supply number format
    if not supply_number:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(supply_number) < 5:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # Get state data
    data = await state.get_data()
    account_id = data.get("selected_account_id")
    
    if not account_id:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # Store supply number and show confirmation
    await state.update_data(supply_number=supply_number)
    await state.set_state(BookingStates.confirming_booking)
    
    # Get account info
    user = await db.get_user_with_accounts(message.from_user.id)
    account = next((acc for acc in user.wb_accounts if acc.id == account_id), None)
    
    # Get user filters
    filters = await db.get_user_filters(user.id)
    
    # Format filter info
    filter_info = "üìã <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:</b>\n"
    
    if filters:
        if filters.warehouses:
            warehouses = filters.warehouses
            filter_info += f"üè™ –°–∫–ª–∞–¥—ã: {len(warehouses)} –≤—ã–±—Ä–∞–Ω–æ\n"
        else:
            filter_info += "üè™ –°–∫–ª–∞–¥—ã: –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ\n"
            
        if filters.regions:
            regions = filters.regions
            filter_info += f"üåç –†–µ–≥–∏–æ–Ω—ã: {len(regions)} –≤—ã–±—Ä–∞–Ω–æ\n"
        else:
            filter_info += "üåç –†–µ–≥–∏–æ–Ω—ã: –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ\n"
            
        if filters.min_coefficient is not None:
            filter_info += f"üí∞ –ú–∏–Ω. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {filters.min_coefficient}\n"
        if filters.max_coefficient is not None:
            filter_info += f"üí∞ –ú–∞–∫—Å. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {filters.max_coefficient}\n"
            
        if filters.time_slots:
            filter_info += f"üïí –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã: –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
        else:
            filter_info += "üïí –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã: –ª—é–±—ã–µ\n"
    else:
        filter_info += "üîÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
    
    confirmation_text = (
        "üöö <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"üì¶ –ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏: <code>{supply_number}</code>\n"
        f"üë§ –ê–∫–∫–∞—É–Ω—Ç: <b>{account.name}</b>\n\n"
        f"{filter_info}\n"
        "ü§ñ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–∞–≤–∫—É.\n\n"
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?"
    )
    
    from bot.keyboards.main import get_yes_no_keyboard
    await message.answer(
        confirmation_text,
        parse_mode="HTML",
        reply_markup=get_yes_no_keyboard()
    )


@router.message(BookingStates.confirming_booking)
async def confirm_supply_booking(message: Message, state: FSMContext, db: DatabaseManager, booking_service: BookingService):
    """Confirm and execute supply booking"""
    if message.text == "‚ùå –ù–µ—Ç":
        await state.clear()
        user = await db.get_user_with_accounts(message.from_user.id)
        has_accounts = len(user.wb_accounts) > 0 if user else False
        await message.answer(
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(has_accounts)
        )
        return
    
    if message.text != "‚úÖ –î–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç")
        return
    
    # Get state data
    data = await state.get_data()
    supply_number = data.get("supply_number")
    account_id = data.get("selected_account_id")
    
    if not supply_number or not account_id:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # Clear state
    await state.clear()
    
    # Get user and account
    user = await db.get_user_with_accounts(message.from_user.id)
    account = next((acc for acc in user.wb_accounts if acc.id == account_id), None)
    
    if not account:
        await message.answer(
            "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_main_keyboard(True)
        )
        return
    
    # Show processing message
    processing_msg = await message.answer(
        "üîÑ <b>–ü–æ–∏—Å–∫ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞...</b>\n\n"
        f"üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞: <code>{supply_number}</code>\n"
        f"üë§ –ê–∫–∫–∞—É–Ω—Ç: <b>{account.name}</b>\n\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML",
        reply_markup=get_main_keyboard(True)
    )
    
    try:
        # Execute booking
        success = await booking_service.auto_book_supply(
            user_id=user.id,
            account_id=account_id,
            supply_number=supply_number
        )
        
        if success:
            await processing_msg.edit_text(
                "‚úÖ <b>–ü–û–°–¢–ê–í–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–ê!</b>\n\n"
                f"üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞: <code>{supply_number}</code>\n"
                f"üë§ –ê–∫–∫–∞—É–Ω—Ç: <b>{account.name}</b>\n\n"
                "üéâ –°–ª–æ—Ç –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n"
                "üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ '–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'.",
                parse_mode="HTML"
            )
        else:
            await processing_msg.edit_text(
                "‚ùå <b>–ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨</b>\n\n"
                f"üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞: <code>{supply_number}</code>\n\n"
                "üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ WB API\n"
                "‚Ä¢ –í—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"Error in auto booking: {e}")
        await processing_msg.edit_text(
            "‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ò</b>\n\n"
            f"üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞: <code>{supply_number}</code>\n\n"
            f"üîß –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)[:100]}...\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        ) 