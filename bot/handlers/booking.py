from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from loguru import logger

from database import DatabaseManager
from services.booking import BookingService


router = Router()


@router.callback_query(F.data.startswith("book_"))
async def handle_book_slot(callback: CallbackQuery, db: DatabaseManager, booking_service: BookingService):
    """Handle slot booking"""
    slot_id = callback.data.split("_", 1)[1]
    
    # Acknowledge callback immediately
    await callback.answer("üîÑ –ë—Ä–æ–Ω–∏—Ä—É—é —Å–ª–æ—Ç...")
    
    # Try to book slot
    success = await booking_service.book_slot_by_id(
        user_id=callback.from_user.id,
        slot_id=slot_id
    )
    
    if success:
        # Update message to show success
        try:
            await callback.message.edit_text(
                callback.message.text + "\n\n‚úÖ <b>–ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–û!</b>",
                parse_mode="HTML"
            )
        except:
            pass
    else:
        # Booking failed - notification already sent by booking service
        try:
            await callback.message.edit_text(
                callback.message.text + "\n\n‚ùå <b>–ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨</b>",
                parse_mode="HTML"
            )
        except:
            pass


@router.callback_query(F.data.startswith("skip_"))
async def handle_skip_slot(callback: CallbackQuery):
    """Handle skip slot"""
    await callback.answer("–°–ª–æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
    
    try:
        # Update message to show it was skipped
        await callback.message.edit_text(
            callback.message.text + "\n\n‚è≠ <i>–ü—Ä–æ–ø—É—â–µ–Ω–æ</i>",
            parse_mode="HTML"
        )
    except:
        pass


@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
async def cmd_booking_history(message: Message, db: DatabaseManager):
    """Show booking history"""
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # Get recent bookings
    bookings = await db.get_user_booked_slots(user.id, limit=10)
    
    if not bookings:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n\n"
            "–°–ª–æ—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        return
    
    # Format bookings list
    text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</b>\n\n"
    
    for booking in bookings:
        icon = "ü§ñ" if booking.auto_booked else "üë§"
        status_icon = {
            "booked": "‚úÖ",
            "cancelled": "‚ùå",
            "completed": "‚úîÔ∏è"
        }.get(booking.status, "‚ùì")
        
        text += (
            f"{icon} {status_icon} <b>{booking.warehouse_name}</b>\n"
            f"üìÖ {booking.supply_date.strftime('%d.%m.%Y')} "
            f"üïí {booking.time_slot}\n"
            f"üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {booking.coefficient}\n"
            f"üïê –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: {booking.booked_at.strftime('%d.%m %H:%M')}\n\n"
        )
    
    await message.answer(text, parse_mode="HTML") 