from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from loguru import logger

from database import DatabaseManager
from bot.keyboards import get_main_keyboard
from bot.states import UserStates


router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, db: DatabaseManager):
    """Handle /start command"""
    user_id = message.from_user.id
    
    # Check if user exists
    user = await db.get_user(user_id)
    
    if not user:
        # Create new user
        user = await db.create_user(
            telegram_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        logger.info(f"New user created: {user_id}")
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫ Wildberries.\n\n"
            "üöÄ –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ WB\n"
            "‚Ä¢ –ì–∏–±–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å–∫–ª–∞–¥–∞–º –∏ –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á WB.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç' ‚¨áÔ∏è"
        )
    else:
        # Get user accounts
        accounts = await db.get_user_accounts(user.id)
        has_accounts = len(accounts) > 0
        
        welcome_text = (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n\n"
        )
        
        if has_accounts:
            active_accounts = [acc for acc in accounts if acc.is_active]
            welcome_text += (
                f"‚úÖ –£ –≤–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(active_accounts)}/{len(accounts)}\n"
                f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚¨áÔ∏è"
            )
        else:
            welcome_text += (
                "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã ‚¨áÔ∏è"
            )
    
    # Clear state
    await state.clear()
    
    # Send welcome message
    await message.answer(
        text=welcome_text,
        reply_markup=get_main_keyboard(has_accounts=user and len(await db.get_user_accounts(user.id)) > 0)
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/add_account - –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç WB\n"
        "/list_accounts - –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "/status - –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        
        "<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
        "1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB\n"
        "2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /add_account\n"
        "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å–∫–ª–∞–¥–∞–º\n"
        "4Ô∏è‚É£ –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö\n\n"
        
        "<b>–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç —Å–ª–æ—Ç–æ–≤ –≤ –¥–µ–Ω—å\n"
        "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ª—É—á—à–∏–µ —Å–ª–æ—Ç—ã\n\n"
        
        "<b>–§–∏–ª—å—Ç—Ä—ã:</b>\n"
        "‚Ä¢ –°–∫–ª–∞–¥—ã - –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ\n"
        "‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
        "‚Ä¢ –í—Ä–µ–º—è - —É–¥–æ–±–Ω—ã–µ —á–∞—Å—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫\n\n"
        
        "‚ùì –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await message.answer(help_text, parse_mode="HTML")


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button(message: Message):
    """Handle help button"""
    await cmd_help(message)


@router.message(Command("status"))
@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
async def cmd_status(message: Message, db: DatabaseManager):
    """Handle /status command"""
    user = await db.get_user_with_accounts(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # Get accounts info
    total_accounts = len(user.wb_accounts)
    active_accounts = len([acc for acc in user.wb_accounts if acc.is_active])
    
    # Get filters info
    filters = await db.get_user_filters(user.id)
    
    status_text = (
        "üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
        f"üíº –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {active_accounts}/{total_accounts}\n"
    )
    
    if active_accounts > 0:
        status_text += "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: <b>–ê–∫—Ç–∏–≤–µ–Ω</b>\n"
        status_text += "üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 5 —Å–µ–∫\n\n"
        
        if filters:
            status_text += "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n"
            
            if filters.warehouses:
                status_text += f"üè≠ –°–∫–ª–∞–¥—ã: {len(filters.warehouses)} –≤—ã–±—Ä–∞–Ω–æ\n"
            else:
                status_text += "üè≠ –°–∫–ª–∞–¥—ã: –í—Å–µ\n"
            
            status_text += f"üìä –ú–∏–Ω. –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {filters.min_coefficient}\n"
            
            if filters.auto_booking_enabled:
                status_text += f"ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ (–ª–∏–º–∏—Ç {filters.auto_booking_limit}/–¥–µ–Ω—å)\n"
            else:
                status_text += "ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚ùå\n"
            
            if filters.notifications_enabled:
                status_text += "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ\n"
            else:
                status_text += "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚ùå\n"
    else:
        status_text += "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: <b>–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</b>\n"
        status_text += "‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç\n"
    
    await message.answer(status_text, parse_mode="HTML") 