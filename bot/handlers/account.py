from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from loguru import logger

from database import DatabaseManager
from wb_api import WildberriesAPI, InvalidAPIKeyError
from bot.keyboards import get_cancel_keyboard, get_main_keyboard, get_account_list_keyboard
from bot.states import AccountStates
from config import settings


router = Router()


@router.message(Command("add_account"))
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def cmd_add_account(message: Message, state: FSMContext, db: DatabaseManager):
    """Handle add account command"""
    # Check user exists
    user = await db.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # Check account limit
    accounts = await db.get_user_accounts(user.id)
    if len(accounts) >= settings.MAX_ACCOUNTS_PER_USER:
        await message.answer(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ({settings.MAX_ACCOUNTS_PER_USER}).\n"
            f"–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã."
        )
        return
    
    await state.set_state(AccountStates.waiting_for_api_key)
    await message.answer(
        "üîë –û—Ç–ø—Ä–∞–≤—å—Ç–µ API –∫–ª—é—á –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ WB.\n\n"
        "–ì–¥–µ –≤–∑—è—Ç—å –∫–ª—é—á:\n"
        "1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–î–æ—Å—Ç—É–ø –∫ API'\n"
        "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞\n\n"
        "‚ö†Ô∏è –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –≤–∞—à API –∫–ª—é—á!",
        reply_markup=get_cancel_keyboard()
    )


@router.message(AccountStates.waiting_for_api_key)
async def process_api_key(message: Message, state: FSMContext, db: DatabaseManager):
    """Process API key input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user = await db.get_user_with_accounts(message.from_user.id)
        has_accounts = len(user.wb_accounts) > 0 if user else False
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(has_accounts)
        )
        return
    
    api_key = message.text.strip()
    
    # Delete message with API key for security
    try:
        await message.delete()
    except:
        pass
    
    # Show processing message
    processing_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞...")
    
    try:
        # Validate API key
        async with WildberriesAPI(api_key) as api:
            is_valid = await api.validate_api_key()
        
        if not is_valid:
            await processing_msg.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # API key is valid, ask for account name
        await state.update_data(api_key=api_key)
        await state.set_state(AccountStates.waiting_for_account_name)
        
        await processing_msg.edit_text(
            "‚úÖ API –∫–ª—é—á –ø—Ä–∏–Ω—è—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û—Å–Ω–æ–≤–Ω–æ–π' –∏–ª–∏ '–ò–ü –ò–≤–∞–Ω–æ–≤'):"
        )
        
    except InvalidAPIKeyError:
        await processing_msg.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"Error validating API key: {e}")
        await processing_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(AccountStates.waiting_for_account_name)
async def process_account_name(message: Message, state: FSMContext, db: DatabaseManager):
    """Process account name input"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user = await db.get_user_with_accounts(message.from_user.id)
        has_accounts = len(user.wb_accounts) > 0 if user else False
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(has_accounts)
        )
        return
    
    account_name = message.text.strip()[:100]  # Limit name length
    
    # Get data from state
    data = await state.get_data()
    api_key = data.get("api_key")
    
    if not api_key:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /add_account")
        return
    
    # Get user
    user = await db.get_user(message.from_user.id)
    
    try:
        # Add account to database
        account = await db.add_wb_account(
            user_id=user.id,
            api_key=api_key,
            name=account_name
        )
        
        await state.clear()
        
        # Update keyboard
        accounts = await db.get_user_accounts(user.id)
        
        await message.answer(
            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç '{account_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö.\n"
            f"–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'.",
            reply_markup=get_main_keyboard(has_accounts=True)
        )
        
        logger.info(f"Account added for user {user.id}: {account_name}")
        
    except Exception as e:
        logger.error(f"Error adding account: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(has_accounts=False)
        )
        await state.clear()


@router.message(Command("list_accounts"))
@router.message(F.text == "üíº –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã")
async def cmd_list_accounts(message: Message, db: DatabaseManager):
    """Handle list accounts command"""
    user = await db.get_user_with_accounts(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if not user.wb_accounts:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_account –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
        )
        return
    
    # Format accounts list
    accounts_data = []
    for acc in user.wb_accounts:
        accounts_data.append({
            "id": acc.id,
            "name": acc.name,
            "is_active": acc.is_active
        })
    
    text = (
        "üíº <b>–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã WB:</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    
    keyboard = get_account_list_keyboard(accounts_data)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data.startswith("account_"))
async def handle_account_action(callback: CallbackQuery, db: DatabaseManager):
    """Handle account actions"""
    account_id = int(callback.data.split("_")[1])
    
    # Get account info
    accounts = await db.get_user_accounts(callback.from_user.id)
    account = next((acc for acc in accounts if acc.id == account_id), None)
    
    if not account:
        await callback.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # TODO: Show account menu with options to toggle, delete, etc.
    await callback.answer(f"–ê–∫–∫–∞—É–Ω—Ç: {account.name}", show_alert=True)


@router.callback_query(F.data == "add_account")
async def handle_add_account_callback(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """Handle add account from inline keyboard"""
    await callback.message.delete()
    await cmd_add_account(callback.message, state, db) 